Въведение






История

Селениум за пръв път се появява през 2004 г., когато Джейсън Хъгинс тества вътрешно приложение в ThoughtWorks. Като един умен човек, той смята, че има по-добри приложения на своето време, отколкото ръчно да преминава едни и същи тестове с всяка промяна  която прави. Той разработил Javascript библиотека, която може да взаимодейства със уеб страници, като му позволява автоматично да изпълнява тестове срещу няколко браузъра. Тази библиотека в крайна сметка става ядрото на Селениум, което лежи в основата на цялата функционалност на Селениум Remote Control (RC) и Селениум IDE. Селениум RC е разтърсващ, защото няма друг продукт, който да ви позволява да контролирате браузъра с език по ваш избор. Въпреки, че Селениум е огромен инструмент, той не е без своите недостатъци. Поради свойте Javascript базирани автоматизации и ограниченията за сигурност които браузърите прилагат за Javascript, някой неща е невъзможно да се направят.
Също така, уебапликацийте стават все по-мощни с течение на времето, като се възползват от всички нововъведения, които  новите браузъри предоставят и така правейки тези ограничения все по осезаеми и болезнени. През 2006 г. един смел инженер в Google на име Саймън Стюарт започна работа по проект, който той нарича WebDriver. Google отдавна е голям потребител на Селениум, но тестерите е трябвало да работят заобикаляки ограниченията на продукта. 
Саймън иска инструмент за тестване, който комуникира директно с браузъра, като се използва "родния" методът за системата на браузъра и операционната за комуникация, като по този начин се избягват ограниченията на тестовата среда на Javascript. 
Проектът WebDriver започва с цел да се решат "болките" на Селениум. 
През 2008 г. Олимпийските игри в Пекин отбелязват пристигането на Китай като глобална сила, финансовата криза в САЩ води до най-лошата международна рецесия от Голямата депресия насам, The Dark Knight се гледа от всияки (по два пъти), заради преждевременната загуба на Хийт Леджър. Но най-важната история на тази година е сливането на Селениум и WebDriver. Селениум има масивна общност и търговска подкрепа, но WebDriver ясно се вижда, че ще е инструментът на бъдещето.
Сливането на двата инструмента, предоставя общ набор от функции за всички потребители и събира някои от най-големите умове в сферата на тестването под един покрив. Може би най-доброто обяснение за това защо WebDriver и Селениум се сливат е подробно описана от Саймън Стюарт, създател на WebDriver, в публичен имейл до общностите на WebDriver и Селениум на 6 август, 2009 г. "Защо се сливат проектите? Отчасти поради факта че WebDriver решава някои от недостатъците в Селениум, отчасти защото Селениум решава някои от недостатъци в WebDriver  и отчасти защото основните  сътрудници на Селениум и аз чувстваме, че това е най-добрият начин да предложим на потребителите възможно най-добрата софтуерна платформа."




Селениум IDE






Селениум Remote Control

Селениум Remote Control (RC) е сървър, написан на Java, който приема команди за браузъра чрез HTTP. RC прави възможно да се напишат автоматизирани тестове за уеб приложения, на който и да е език за програмиране, което дава възможност за по-добра интеграция на Селениум в съществуващите софтуерни рамки за компонентно тестване (unit testing frameworks). За да направи по-лесно писането на тестове, проектът Селениум в момента осигурява клиентски драйвери за PHP, Python, Ruby, .NET, Perl и Java. Java драйверът може да се използва с JavaScript (чрез Rhino engine). Необходима е нова инстанция на Селениум RC сървъра, за да стартират тестови варианти (test cases) за HTML - което означава, че портът трябва да бъде различен за всяко едно паралелно тестване. Обаче, за Java/PHP тестов вариант (test case) само една инстанция на Селениум RC трябва да работи непрекъснато.






Селеним WebDriver

Selenium WebDriver е усъвършенстван вариант на Selenium RC. Selenium WebDriver приема команди (изпратени от Selenese или ClientAPI) и ги изпраща към уеб браузъра. Имплементира се през browser – специален браузър драйвер, служещ за изпращане на команди към браузър и връщането на резултат. Повечето от браузър драйверите отварят браузър приложения (като Firefox, Internet Explorer); също така има и HtmlUnit драйвер, който симулира браузър, използващ HtmlUnit. WebDriver e името на основният интерфейс, на който трябва да се пишат тестовете, но има и още няколко имплементации, като HtmlUnit Driver, Firefox Driver, Internet Explorer Driver, Chrome Driver, Opera Driver, IOS Driver, Android Driver.
За разлика от Selenium 1, където Selenium сървърът беше нужно да изпълнява тестове, Selenium WebDriver не се нуждае от сървър за да изпълнява тестове. Вместо това WebDriver директно стартира инстанция на браузъра и го контролира. Въпреки това е възможно използването на Selenium Grid с WebDriver за да се изпълняват тестове върху отдалечени системи(remote systems). Където е възможно, WebDriver използва вътрешни за операционната система команди за контролиране на браузъра, вместо браузър-базирани JavaScript команди. Това помага да се избегнат проблеми с тънките разлики между командите на OC и JavaScript командите, като ограниченията за сигурност. Selenium WebDriver e създаден за по-добра поддръжка на динамични уеб страници, където елементи от страницата могат да се променят без да се презарежда страницата.
Selenium WebDriver прави директни извиквания към браузъра, използвайки поддръжката за автомация на дадения браузър. На практика това означава, че Selenium 2.0 API има значително по-малко извиквания от Selenium 1.0 API. Докато Selenium 1.0 се стреми да представи богат интерфейс за много различни операции на браузъра, Selenium 2.0 се стреми да представи набор от градивни блокове, чрез които потребителите да могат да изградят свой собствен DSL (Domain Specific Language) или по-точно обектно-ориентирано API с добър дизайн и поддръжка на модерни и напреднали “web-app testing” проблеми. Такъв DSL вече съществува: Watir проектът в езика Ruby има голям набор от добри дизайни. В Ruby, Watir-webdriver  имплементира Watir API като обвивка на Selenium WebDriver. Watir-webdriver е създаден напълно автоматично чрез WebDriver и HTML спесификации.
Java версията на WebDriver предоставя имплементация на Selenium-RC API.  Това означава, че може да се използва основната технология на WebDriver, използвайки Selenium-RC API. Използва се за обратна съвместимост. Също позволява да се използват двете API-та заедно върху един й същ тест код. WebDriver не предоставя поддръжка за толкова много браузъри както Selenium RC. За да се предостави тази поддръжка, използвайки WebDriver API, може да се използва SeleneseCommandExecutor.
През 2012 г., Simon Steward(създателят на WebDriver), който е работел тогава за Google, а сега за Facebook, и David Burns от Mozilla са обсъждали с W3C, WebDriver да бъде обявен като интернет стандарт. През юли 2012 г. е пуснат раборещият проект. Selenium WebDriver (Selenium 2.0) е напълно имплементиран и поддържан от Phyton, Ruby, Java и C#.




Селениум Grid





Селениум Екосистема
